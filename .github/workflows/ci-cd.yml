name: CI/CD Pipeline

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  build-and-test:
    name: 📦 Buildar e Testar
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code 📥
        uses: actions/checkout@v4

      - name: Setup Node.js 🟢
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install pnpm 📦
        uses: pnpm/action-setup@v3
        with:
          version: 10.15.0

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache 💾
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies 📦
        run: pnpm install

      - name: Lint backend ✨
        run: pnpm --filter backend lint

      - name: Lint frontend ✨
        run: pnpm --filter frontend lint

      - name: Test backend 🧪
        run: pnpm --filter backend test

      - name: Build ⚙️
        run: pnpm build

  docker-test:
    name: 🐳 Testando Imagens Docker
    runs-on: ubuntu-latest
    needs: build-and-test

    steps:
      - name: Checkout code 📥
        uses: actions/checkout@v4

      - name: Set up Docker Buildx 🐳
        uses: docker/setup-buildx-action@v3

      - name: Build and start Docker containers 🏗️
        run: |
          docker compose build
          docker compose up -d

      - name: Wait for containers to be ready ⏳
        run: |
          echo "Waiting for containers to be ready..."
          sleep 30

      - name: Test backend container 🧪
        run: |
          if curl -s http://localhost:4002 > /dev/null; then
            echo "✅ Backend is running"
          else
            echo "❌ Backend is not running"
            exit 1
          fi

      - name: Test frontend container 🧪
        run: |
          if curl -s http://localhost:8922 > /dev/null; then
            echo "✅ Frontend is running"
          else
            echo "❌ Frontend is not running"
            exit 1
          fi

      - name: Stop Docker containers 🛑
        run: docker compose down

  deploy-prod:
    name: 🚀 Deploy em Produção
    runs-on: ubuntu-latest
    needs: docker-test
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code 📥
        uses: actions/checkout@v4

      - name: Set up Docker Buildx 🐳
        uses: docker/setup-buildx-action@v3

      - name: Build backend Docker image 🏗️
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./apps/backend/Dockerfile
          tags: linkedin-job-searcher-backend:latest
          outputs: type=docker,dest=/tmp/backend-image.tar

      - name: Build frontend Docker image 🏗️
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./apps/frontend/Dockerfile
          tags: linkedin-job-searcher-frontend:latest
          outputs: type=docker,dest=/tmp/frontend-image.tar

      - name: Configurar chave SSH 🔑
        run: |
          mkdir -p ~/.ssh/
          echo "${{ secrets.SERVER_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          cat >>~/.ssh/config <<EOF
          Host prod
            HostName ${{ secrets.SERVER_HOST }}
            User ${{ secrets.SERVER_USER }}
            Port ${{ secrets.SERVER_SSH_PORT }}
            IdentityFile ~/.ssh/id_rsa
            ServerAliveInterval 100
            ServerAliveCountMax 3
            TCPKeepAlive yes
            StrictHostKeyChecking no
            UserKnownHostsFile=/dev/null
          EOF

      - name: Transferir Imagens Docker para VPS 📤
        run: |
          scp /tmp/backend-image.tar prod:/tmp/backend-image.tar
          scp /tmp/frontend-image.tar prod:/tmp/frontend-image.tar

      - name: Deploy em Produção 🚀
        run: |
          ssh prod << 'EOF'
            set -e
            cd /${{ secrets.SERVER_USER }}/linkedin-job-searcher
            git fetch origin main
            git reset --hard origin/main

            # Load Docker images
            docker load < /tmp/backend-image.tar
            docker load < /tmp/frontend-image.tar

            # Start containers with docker-compose
            docker compose up -d

            # Clean up
            docker system prune -af
            rm -f /tmp/backend-image.tar /tmp/frontend-image.tar
          EOF
