name: CI/CD Pipeline

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 10.15.0

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install

      - name: Lint backend
        run: pnpm --filter backend lint

      - name: Lint frontend
        run: pnpm --filter frontend lint

      - name: Test backend
        run: pnpm --filter backend test

      - name: Build
        run: pnpm build

      # Uncomment and configure if you have a deployment step
      # - name: Deploy
      #   if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
      #   run: |
      #     # Add deployment commands here

  docker-test:
    runs-on: ubuntu-latest
    needs: build-and-test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and start Docker containers
        run: |
          docker-compose build
          docker-compose up -d

      - name: Wait for containers to be ready
        run: |
          echo "Waiting for containers to be ready..."
          sleep 30

      - name: Test backend container
        run: |
          if curl -s http://localhost:3000 > /dev/null; then
            echo "Backend is running"
          else
            echo "Backend is not running"
            exit 1
          fi

      - name: Test frontend container
        run: |
          if curl -s http://localhost:3001 > /dev/null; then
            echo "Frontend is running"
          else
            echo "Frontend is not running"
            exit 1
          fi

      - name: Stop Docker containers
        run: docker-compose down
